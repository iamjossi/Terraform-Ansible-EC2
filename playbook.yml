---
    - name: Provision EC2 with Docker, Prometheus, Grafana, ASG, and AWS Backup
      hosts: localhost
      connection: local
      gather_facts: False
      vars:
        ansible_python_interpreter: /usr/bin/python3.12
        keypair: Girl
        instance_type: t2.medium
        image_id: ami-05c172c7f0d3aed00
        wait: yes
        group: webserver
        count: 1
        region: eu-west-2
        security_group: ec2-security-group
        tag_name:
          Name: The_Village_School
        
      tasks:
        - name: Start ssh-agent and add key
          shell: |
            eval $(ssh-agent -s)
            ssh-add {{ lookup('credential', 'SSH', 'file') }}
          run_once: true

        - name: Create a security group
          amazon.aws.ec2_group:
            name: "{{ security_group }}"
            description: Security Group for webserver
            region: "{{ region }}"
            rules:
              - proto: tcp
                from_port: 22
                to_port: 22
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 3000
                to_port: 3000
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 9090
                to_port: 9090
                cidr_ip: 0.0.0.0/0
            rules_egress:
              - proto: all
                cidr_ip: 0.0.0.0/0
          register: basic_firewall
    
        - name: Launch the EC2 instance
          amazon.aws.ec2_instance:
            security_group: "{{ security_group }}"
            instance_type: "{{ instance_type }}"
            image_id: "{{ image_id }}"
            wait: "{{ wait }}"
            region: "{{ region }}"
            key_name: "{{ keypair }}"
            count: "{{ count }}"
            tags: "{{ tag_name }}"
            user_data: |
              #!/bin/bash
              sudo apt update -y
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo docker run -d --name schoolapp -p 3000:3000 schoolapp:latest
          register: ec2_instance
    
        - name: Add EC2 instance to Ansible inventory
          add_host:
            name: "{{ item.public_ip_address }}"
            groups: provisioned
          with_items: "{{ ec2_instance.instances }}"
    
    - name: Configure EC2 Instance
      hosts: provisioned
      become: yes
      vars:
        ansible_user: ubuntu
        
      tasks:
        - name: Install Prometheus
          shell: |
            wget https://github.com/prometheus/prometheus/releases/download/v2.50.0/prometheus-2.50.0.linux-amd64.tar.gz
            tar -xvf prometheus-2.50.0.linux-amd64.tar.gz
            sudo mv prometheus-2.50.0.linux-amd64 /usr/local/bin/prometheus
            sudo mv /usr/local/bin/prometheus/prometheus /usr/local/bin/
            sudo mv /usr/local/bin/prometheus/promtool /usr/local/bin/
            sudo mkdir /etc/prometheus /var/lib/prometheus
            sudo cp -r /usr/local/bin/prometheus/consoles /etc/prometheus
            sudo cp -r /usr/local/bin/prometheus/console_libraries /etc/prometheus
            sudo useradd -M -r -s /bin/false prometheus
            sudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus
            sudo systemctl start prometheus
          args:
            executable: /bin/bash
    
        - name: Install Grafana
          shell: |
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable main"
            sudo wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install -y grafana
            sudo systemctl enable grafana-server
            sudo systemctl start grafana-server
          args:
            executable: /bin/bash
    
        - name: Open Prometheus and Grafana ports
          ufw:
            rule: allow
            port: "{{ item }}"
            proto: tcp
          loop:
            - 3000
            - 9090
    
        - name: Enable AWS Backup
          amazon.aws.backup_plan:
            name: EC2BackupPlan
            rules:
              - rule_name: DailyBackup
                target_backup_vault_name: Default
                schedule_expression: "cron(0 12 * * ? *)"
                lifecycle:
                  cold_storage_after: 30
                  delete_after: 90
          register: backup_plan
    
        - name: Attach EC2 to Backup Plan
          amazon.aws.backup_selection:
            backup_plan_id: "{{ backup_plan.id }}"
            selection_name: EC2BackupSelection
            resources:
              - "{{ ec2_instance.instances[0].arn }}"
    
