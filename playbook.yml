- name: Provision EC2 with Docker and AWS Backup
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3.12
    keypair: Girl
    instance_type: t2.medium
    image_id: ami-05c172c7f0d3aed00
    wait: yes
    group: webserver
    count: 1
    region: eu-west-2
    security_group: ec2-security-group
    tag_name:
      Name: The_Village_School
    security_group_rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3000
        to_port: 3000
        cidr_ip: 0.0.0.0/0
  tasks:
    - name: Create Security Group
      amazon.aws.ec2_group:
        name: "{{ security_group }}"
        description: Security Group for webserver
        region: "{{ region }}"
        rules: "{{ security_group_rules }}"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: basic_firewall
    - name: Launch EC2 Instance
      amazon.aws.ec2_instance:
        security_group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ image_id }}"
        wait: "{{ wait }}"
        region: "{{ region }}"
        key_name: "{{ keypair }}"
        count: "{{ count }}"
        tags: "{{ tag_name }}"
      register: ec2_instance

    - name: Wait foor Ec2 Instance to become reachable
      wait_for:
        host: "{{ ec2_instance.instances[0].public_ip_address }}"
        port: 22
        delay: 10
        timeout: 300
        
    - name: Add EC2 Instance to Ansible Inventory
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: provisioned
      with_items: "{{ ec2_instance.instances }}"
      
- name: Configure EC2 Instance
  hosts: provisioned
  become: yes
  gather_facts: yes
  vars:
    ansible_user: ubuntu
    ansible_ssh_private_key_file: "{{ lookup('env', 'ANSIBLE_PRIVATE_KEY') }}"
    ansible_ssh_common_args: -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
    aws_access_key_id: "{{ lookup('env', 'ACCESS_KEY') }}"
    aws_secret_access_key: "{{ lookup('env', 'SECRET_ACCESS_KEY') }}"
    ecr_repository: schoolapp
    ecr_image: schoolapp
    ecr_region: eu-west-2
    ACCOUNT_ID: "{{ lookup('env', 'ACCOUNT_ID') }}"
    ecr_url: "{{ lookup('env', 'ECR_URL') }}"
  tasks:
    - name: Download Dockers GPG Key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: 0644
        
    - name: Add Docker GPG key to apt keyring
      apt_key:
        file: /etc/apt/keyrings/docker.asc
        state: present
      become: yes

        
    - name: Add Docker Repository to apt sources
      copy:
        content: |
          deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        dest: /etc/apt/sources.list.d/docker.list
      become: yes

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Start and Enable Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install unzip
      apt:
        name: unzip
        state: present

    - name: Install AWS CLI
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
      register: aws_cli_installation
      ignore_errors: yes
      
    - name: Wait for CLI
      wait_for:
        path: /usr/local/bin/aws
        state: present
        delay: 10
        timeout: 300
        
    - name: AWS Configure
      shell: |
        aws configure set aws_access_key_id {{ lookup('env', 'ACCESS_KEY') }}
        aws configure set aws_secret_access_key {{ lookup('env', 'SECRET_ACCESS_KEY') }}
        aws configure set default.region {{ lookup('env', 'AWS_REGION') }}
    
    - name: Login to AWS ECR
      shell: |
        aws ecr get-login-password --region {{ ecr_region }} | docker login --username AWS --password-stdin {{ ecr_url }}
      environment:
        AWS_ACCESS_KEY_ID: "{{ lookup('env', 'ACCESS_KEY') }}"
        AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'SECRET_ACCESS_KEY') }}"
        
    - name: Pull Docker Image from ECR
      docker_image:
        name: "{{ lookup('env', 'ECR_URL') }}/schoolapp:latest"
        source: pull
    - name: Run Docker Container
      docker_container:
        name: schoolapp
        image: "{{ lookup('env', 'ECR_URL') }}/schoolapp:latest"
        state: started
        ports:
          - 3000:3000

    - name: Create a Backup Vault
      amazon.aws.backup_vault:
        name: Default
        region: {{ lookup('env', 'AWS_REGION') }}
      register: backup_vault

    - name: Enable AWS Backup
      amazon.aws.backup_plan:
        name: EC2BackupPlan
        rules:
          - rule_name: DailyBackup
            target_backup_vault_name: Default
            schedule_expression: cron(0 12 * * ? *)
            lifecycle:
              move_to_cold_storage_after_days: 30
              delete_after_days: 120
              
      register: backup_plan
    - name: Attach EC2 to Backup Plan
      amazon.aws.backup_selection:
        backup_plan_id: "{{ backup_plan.id }}"
        selection_name: EC2BackupSelection
        resources:
          - "{{ ec2_instance.instances[0].arn }}"
