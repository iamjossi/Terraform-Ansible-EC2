---
- name: Provision EC2 with Docker and AWS Backup
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
    ansible_python_interpreter: /usr/bin/python3.12
    keypair: Girl
    instance_type: t2.medium
    image_id: ami-05c172c7f0d3aed00
    wait: yes
    group: webserver
    count: 1
    region: eu-west-2
    security_group: ec2-security-group
    tag_name:
      Name: The_Village_School
    security_group_rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3000
        to_port: 3000
        cidr_ip: 0.0.0.0/0

  tasks:
    - name: Create Security Group
      amazon.aws.ec2_group:
        name: '{{ security_group }}'
        description: Security Group for webserver
        region: '{{ region }}'
        rules: '{{ security_group_rules }}'
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: basic_firewall

    - name: Launch EC2 Instance
      amazon.aws.ec2_instance:
        security_group: '{{ security_group }}'
        instance_type: '{{ instance_type }}'
        image_id: '{{ image_id }}'
        wait: '{{ wait }}'
        region: '{{ region }}'
        key_name: '{{ keypair }}'
        count: '{{ count }}'
        tags: '{{ tag_name }}'
      register: ec2_instance

    - name: Add EC2 Instance to Ansible Inventory
      add_host:
        name: '{{ item.public_ip_address }}'
        groups: provisioned
      with_items: '{{ ec2_instance.instances }}'

- name: Configure EC2 Instance
  hosts: provisioned
  become: yes
  gather_facts: yes

  vars:
    ansible_user: ubuntu

  tasks:
    - name: Update known_hosts file
      shell: ssh-keyscan -H {{ inventory_hostname }} >> ~/.ssh/known_hosts

    - name: Update package list
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker.io
        state: present
        install_recommends: yes

    - name: Start and enable Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install AWS CLI
      pip:
        name: awscli
        state: present  

    - name: Login to ECR
      shell: |
        aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 637423240589.dkr.ecr.eu-west-2.amazonaws.com

    - name: Pull Docker image from ECR
      docker_image:
        name: 637423240589.dkr.ecr.eu-west-2.amazonaws.com/schoolapp:latest
        source: pull

    - name: Run Docker container
      docker_container:
        name: schoolapp
        image: 637423240589.dkr.ecr.eu-west-2.amazonaws.com/schoolapp:latest
        state: started
        ports:
          - "3000:3000"

    - name: Enable AWS Backup
      amazon.aws.backup_plan:
        name: EC2BackupPlan
        rules:
          - rule_name: DailyBackup
            target_backup_vault_name: Default
            schedule_expression: 'cron(0 12 * * ? *)'
            lifecycle:
              cold_storage_after: 30
              delete_after: 90
      register: backup_plan

    - name: Attach EC2 to Backup Plan
      amazon.aws.backup_selection:
        backup_plan_id: '{{ backup_plan.id }}'
        selection_name: EC2BackupSelection
        resources:
          - '{{ ec2_instance.instances[0].arn }}'
